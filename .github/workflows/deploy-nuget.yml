name: Deploy NuGet Package

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy (e.g., 2.0.1)"
        required: true
        type: string

env:
  DOTNET_VERSION: "9.0.x"
  SOLUTION_PATH: "./src/Main.sln"
  LIBRARY_PROJECT: "./src/Jiro.Commands/Jiro.Commands.csproj"

jobs:
  deploy-nuget:
    name: Build and Deploy NuGet Package
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Extract or use version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            version="${{ github.event.inputs.version }}"
          else
            version=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Deploy version: $version"

      - name: Update project version
        run: |
          # Update the version in the project file
          sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.get_version.outputs.version }}<\/Version>/" ${{ env.LIBRARY_PROJECT }}

          # Verify the change
          echo "Updated version in project file:"
          grep -n "Version" ${{ env.LIBRARY_PROJECT }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

      - name: Run tests
        run: dotnet test ${{ env.SOLUTION_PATH }} --no-build --configuration Release --logger trx --results-directory ./TestResults

      - name: Pack NuGet package
        run: |
          dotnet pack ${{ env.LIBRARY_PROJECT }} \
            --no-build \
            --configuration Release \
            --output ./packages \
            -p:PackageVersion=${{ steps.get_version.outputs.version }} \
            -p:AssemblyVersion=${{ steps.get_version.outputs.version }} \
            -p:FileVersion=${{ steps.get_version.outputs.version }}

      - name: Publish to NuGet.org
        run: |
          dotnet nuget push ./packages/*.nupkg \
            --api-key ${{ secrets.NUGET_TOKEN }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate

      - name: Publish to GitHub Packages
        run: |
          dotnet nuget push ./packages/*.nupkg \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --source https://nuget.pkg.github.com/HueByte/index.json \
            --skip-duplicate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read release notes
        id: release_notes
        run: |
          if [ -f "dev/tags/${{ steps.get_version.outputs.version }}" ]; then
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
            cat dev/tags/${{ steps.get_version.outputs.version }} >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_NOTES=Jiro.Commands v${{ steps.get_version.outputs.version }} - NuGet package release" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"
          name: "Jiro.Commands v${{ steps.get_version.outputs.version }}"
          body: |
            ${{ steps.release_notes.outputs.RELEASE_NOTES }}

            ## ðŸ“¦ NuGet Package
            ```
            dotnet add package Jiro.Commands --version ${{ steps.get_version.outputs.version }}
            ```

            ## ðŸ“‹ Package Information
            - **Package ID**: Jiro.Commands
            - **Version**: ${{ steps.get_version.outputs.version }}
            - **Target Framework**: .NET 9.0
            - **Published to**: NuGet.org and GitHub Packages
          draft: false
          prerelease: false
          files: |
            packages/*.nupkg

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-v${{ steps.get_version.outputs.version }}
          path: ./packages/*.nupkg
          retention-days: 90
